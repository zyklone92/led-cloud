package zyklone.LEDCloud.patterns;

import java.awt.Color;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.Random;


/**
 * The BackdroundPattern class represents a pattern across the cloud's whole led-matrix.
 * It is comprised of a base-color that is applied to the whole cloud as well as
 * a constantly changing list of LocalPatterns that use a low color-intensity color with a heavy blue tone.
 * Every picture of the BackgroundPattern is generated by adding up all of the BackgroundPattern's LocalPatterns
 * on top of the base-color that is applied to the complete picture first.
 * 
 * @author Zyklone
 */
public class BackgroundPattern extends Pattern {
	
	/** the list of patterns this Pattern is comprised of */
	private ArrayList<LocalPattern> patterns = new ArrayList<>();
	/** the base-color that is applied to the whole cloud */
	private Color baseColor = new Color(7, 7, 10);
	private Random rand = new Random();

	/**
	 * Standard constructor.
	 * @param pictureSizeX the length in the x-axis of the led-matrix
	 * @param pictureSizeY the length in the y-axis of the led-matrix
	 */
	public BackgroundPattern(int pictureSizeX, int pictureSizeY) {
		super(pictureSizeX, pictureSizeY);
	}
	
	/**
	 * Standard constructor that initializes the BackGroundPattern's base-color.
	 * @param pictureSizeX the length in the x-axis of the led-matrix
	 * @param pictureSizeY the length in the y-axis of the led-matrix
	 * @param baseColor the base-Color that should be applied to the whole picture
	 */
	public BackgroundPattern(int pictureSizeX, int pictureSizeY, Color baseColor) {
		super(pictureSizeX, pictureSizeY);
		this.baseColor = baseColor;
	}
	
	/**
	 * Initializes the picture by creating the required lists
	 * and setting all the picture's pixels to the base-color.
	 */
	@Override
	protected void initializePicture() {
		// initialize array
		this.picture = new ArrayList<>(pictureSizeY);
		for(int i = 0; i < this.pictureSizeY; i++) {
			ArrayList<Color> row = new ArrayList<Color>(pictureSizeX);
			picture.add(row);
			for(int j = 0; j < pictureSizeX; j++) {
				row.add(this.baseColor);
			}
		}
	}
	
	/**
	 * Sets all of the pictures pixels to the base-color.
	 */
	protected void setBackGround() {
		for(int i = 0; i < this.picture.size(); i++) {
			for(int j = 0; j < this.picture.get(0).size(); j++) {
				this.picture.get(i).set(j, this.baseColor);
			}
		}
	}
	
	/**
	 * Creates a new pattern and adds it to the list of background-patterns.
	 * The type of pattern to be added is randomly chosen.
	 */
	private void addPatternToList() {
		switch(rand.nextInt(3)) {
		case 0: patterns.add(new DotPattern(pictureSizeX, pictureSizeY, true));
			break;
		case 1:	patterns.add(new WallPattern(pictureSizeX, pictureSizeY, true));
			break;
		case 2:	patterns.add(new WavePattern(pictureSizeX, pictureSizeY, true));
			break;
		}
	}

	/**
	 * Calculates and returns the next background-picture.
	 * @return the last calculated picture of this pattern.
	 */
	@Override
	public ArrayList<ArrayList<Color>> getNextPicture() {
		if(this.picture == null)
			initializePicture();
		else 
			setBackGround();

		if(patterns.size() <= 2 || rand.nextInt(50) == 0)
			addPatternToList();
		
		// add up all patterns
		drawAllBackgroundPatterns();
		
		return picture;
	}

	/**
	 * Calculates this class' picture by adding up all of the patterns
	 * in the list of background-patterns.
	 */
	protected void drawAllBackgroundPatterns() {
		for(Iterator<LocalPattern> it = patterns.iterator(); it.hasNext();) {
			LocalPattern current = it.next();
			ArrayList<ArrayList<Color>> tempPic = current.getNextPicture();
			// if pattern has reached lifetime, remove it from list
			if(tempPic == null) {
				it.remove();
				continue;
			}
			for(int y = 0; y < picture.size(); y++) {
				for(int x = 0; x < picture.get(0).size(); x++) {
					Color tempColor = tempPic.get(y).get(x);
					// only add pixel, if it is not dark
					if(tempColor.getRed() != 0 || tempColor.getGreen() != 0 || tempColor.getBlue() != 0) {
						Color comColor = picture.get(y).get(x);
						int red = comColor.getRed() + tempColor.getRed();
						if(red > 255)
							red = 255;
						int green = comColor.getGreen() + tempColor.getGreen();
						if(green > 255)
							green = 255;
						int blue = comColor.getBlue() + tempColor.getBlue();
						if(blue > 255)
							blue = 255;
						picture.get(y).set(x, new Color(red, green, blue));
					}	
				}
			}
		}
	}

}
